package com.exercise.easy.unsolved;

import java.util.Arrays;

public class MergeSortedArray {

    public static void main(String[] args) {
        // [-12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        //1
        //[-49,-45,-42,-41,-40,-39,-39,-39,-38,-36,-34,-34,-33,-33,-32,-31,-29,-28,-26,-26,-24,-21,-20,-20,-18,-16,-16,-14,-11,-7,-6,-5,-4,-4,-3,-3,-2,-2,-1,0,0,0,2,2,6,7,7,8,10,10,13,13,15,15,16,17,17,19,19,20,20,20,21,21,22,22,24,24,25,26,27,29,30,30,30,35,36,36,36,37,39,40,41,42,45,46,46,46,47,48]
        //90
        int[] nums1 = {-12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
        int m = 1;
        int[] nums2 = {-49,-45,-42,-41,-40,-39,-39,-39,-38,-36,-34,-34,-33,-33,-32,-31,-29,-28,-26,-26,-24,-21,-20,-20,-18,-16,-16,-14,-11,-7,-6,-5,-4,-4,-3,-3,-2,-2,-1,0,0,0,2,2,6,7,7,8,10,10,13,13,15,15,16,17,17,19,19,20,20,20,21,21,22,22,24,24,25,26,27,29,30,30,30,35,36,36,36,37,39,40,41,42,45,46,46,46,47,48};
        int n = 90;
        new MergeSortedArray().merge(nums1, m, nums2, n);
        System.out.println(Arrays.toString(nums1));
    }

    private void merges(int[] nums1, int m, int[] nums2, int n) {
        /*
                nums1 = [1], m = 1;
                nums2 = [0], n = 1;

                nums1 = [1], m = 1;
                nums2 = [], n = 0;

                nums1 = [0], m = 0;
                nums2 = [1], n = 1;

         */
        if (m == 0 && n == 1) nums1[0] = nums2[0];
        else {
            System.arraycopy(nums2, 0, nums1, nums1.length - nums2.length, nums2.length);
            Arrays.sort(nums1);
        }
    }

    private void merge(int[] nums1, int m, int[] nums2, int n) {
        if (n == 0) return;
        if (m == 0) {
            for (int i = 0; i < n; i++) {
                nums1[i] = nums2[i];
            }
        }
        else {
            int k = 0;
            for (int i = 0; i < m + n; i++) {
                if (nums1[i] >= nums2[k]) { // if ((nums1[i] < nums2[k] && nums1[i] < nums1[i - 1]))
                    for (int j = m + n - 1; j > i; j--) {
                        nums1[j] = nums1[j - 1];
                    }
                    nums1[i] = nums2[k];
                    k++;
                }
                else {
                    if (nums1[i] == 0 && nums1[i] < nums1[i - 1]) {
                        nums1[i] = nums2[k];
                        k++;
                    }
                }
                if (k == n) return;
            }
        }
    }
}
